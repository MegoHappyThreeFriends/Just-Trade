@using JustTrade.Helpers

<script src="Scripts/context.menu.js"></script>
<script src="Scripts/jsTree3/jstree.min.js"></script>
<link rel="stylesheet" href="../Content/css/admin/permission.css">
<link rel="stylesheet" href="../Content/jsTree/themes/default/style.min.css">


<ol class="breadcrumb admin-page-header">
	<li> - @Lang.Get("Permission")</li>
</ol>

<div id="template_list">
	
	<ol class="breadcrumb admin-page-header">
		<li> - @Lang.Get("Permission template")</li>
	</ol>


	<div id="template_window">
	</div>

</div>

<div id="permition_list">
	
	<ol class="breadcrumb admin-page-header">
		<li> - @Lang.Get("Permission parameter")</li>
	</ol>

	<div class="square-button square-button-disabled">
		<span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
	</div>

	<div id="permition_window">
		<div id="jstree"></div>
	</div>
</div>

<ul id="contextMenu" class="dropdown-menu" role="menu" style="display: none">
	<li><a target="add"><i target="add" class="glyphicon glyphicon-plus"></i> @Lang.Get("Add")</a></li>
	<li><a target="edit"><i target="edit" class="glyphicon glyphicon-pencil"></i> @Lang.Get("Edit")</a></li>
	<li><a target="remove"><i target="remove" class="glyphicon glyphicon-trash"></i> @Lang.Get("Remove")</a></li>
	<li class="divider"></li>
	<li><a target="select"><i target="select" class="glyphicon glyphicon-ok"></i> @Lang.Get("Select all")</a></li>
	<li><a target="unselect"><i target="unselect" class="glyphicon glyphicon-remove"></i> @Lang.Get("Unselect all")</a></li>
	<li class="divider"></li>
	<li><a target="refresh"><i target="refresh" class="glyphicon glyphicon-refresh"></i> @Lang.Get("Refresh")</a></li>
	<li class="divider"></li>
	<li><a target="selectmany" class="context-menu-checkbox">
			<i target="selectmany" class="glyphicon glyphicon-menu-hamburger"><input target="selectmany" id="selectmany" type="checkbox" value="true" readonly/> 
			</i> @Lang.Get("Select many")
	    </a></li>
</ul>

<div id="json_data" style="display: none"></div>

<script language="javascript">
	canSelectMany = false;

	$(document).ready(function() {

		$('#permition_list div.square-button').click(function() {
			var isDisabled = $("div.square-button").hasClass("square-button-disabled");
			if (!isDisabled) {
				UpdateTemplateParameters();
			}
		});

		$('#jstree').on('click', 'li', function() {
			UpdateSaveButton();
		});

		$('#template_window').on('click', 'li', function () {
			if (!canSelectMany){
				UnselectAll();
			}
			$(this).toggleClass('selected-item');
			DrawTemplateParameter();
		});

		DrawTemplates();
	});

	function DrawTemplates() {
	    $.get("Permission/GetTemlateList", function(data) {
	    	$("#template_window").html(data);
		    DrawContextMenu();
	    });
	}

	function DrawContextMenu() {
		$("#template_window li").contextMenu({
			menuSelector: "#contextMenu",
			menuSelected: function (id, selectedMenu) {
				var action = selectedMenu[0].target;
				if (typeof action == "undefined") {
					action = $(selectedMenu).attr("target");
				}

				switch (action) {
					case "add":
						AddTemplate();
						break;

					case "edit":
						EditTemplate();
						break;

					case "remove":
						RemoveTemplate();
						break;

					case "refresh":
						DrawTemplates();
						break;

					case "select":
						SelectAll();
						break;

					case "unselect":
						UnselectAll();
						break;

					case "selectmany":
						canSelectMany = !canSelectMany;
						$('#selectmany').prop('checked', canSelectMany);
						break;

					default:
						alert("Action: " + action + " in menu not found");
				}

			}
		});
	}

	function AddTemplate() {
	    Tools.AjaxGetToBlock("#json_data", "AddUpdateTemplate", "/Permission/ShowAddUpdateTemplate");
	}

	function EditTemplate() {
		var ids = new Array();
		$(".selected-item").each(function (i, v) {
			ids.push("id="+$(v).attr("id"));
		});
		var idsString = ids.join("&");
		Tools.AjaxGetToBlock("#json_data", "AddUpdateTemplate", "/Permission/ShowAddUpdateTemplate?" + idsString);
	}

	function RemoveTemplate() {
		var ids = new Array();
		var names = new Array();
		$(".selected-item").each(function (i, v) {
			ids.push($(v).attr("id"));
			names.push($(v).text());
		});
		var namesString = names.join(",");
		var message = Tools.StrFormat('@Lang.Get("Do you want delete template(s) ({0}) ?")', namesString);
		var ms = new MessageBox(message, '@Lang.Get("Warning")');
		ms.Confirm(function(isAccept) {
			if (isAccept) {
				RemoveTemplates(ids);
			}
		});

	}

	function UnselectAll() {
		$("#template_window li").each(function(i, v) {
			$(v).removeClass("selected-item");
		});
	}

	function SelectAll() {
		$("#template_window li").each(function(i, v) {
			$(v).addClass("selected-item");
		});
	}

	function RemoveTemplates(templates) {
		ShowBlockUI.Show();
		$("#RemoveTemplate").remove();
		$.ajax(
		{
			type: "POST",
			url: "/Permission/RemoveTemplates",
			data: { ids: templates },
			success: function (data) {
				if (data.length > 0) {
					$("#json_data").append("<div id='RemoveTemplate'>" + data + "</div>");
				}
			},
			dataType: 'html',
			complete: function () {
				$.unblockUI();
				DrawTemplates();
			},
			error: function (xhr, status, error) {
				var message = '@Lang.Get("Error connect to server. Message:")';
				alert(message + error);
			}
		});
	}

	function UpdateTemplateParameters() {
		var selectedItem = $(".selected-item")[0];
		var selectedId = (selectedItem !== undefined ? $(selectedItem).attr('id') : "00000000-0000-0000-0000-000000000000");
		var ids = GetSelectionItemInTree();
		ShowBlockUI.Show();
		$("#UpdateTemplateForm").remove();
		$.ajax(
		{
			type: "POST",
			url: "/Permission/UpdateTemplateParameter/",
			data: { parameters: ids, templateId: selectedId },
			success: function(data) {
				if (data.length > 0) {
					$("#json_data").append("<div id='UpdateTemplateForm'>" + data + "</div>");
				} else {
					window.initialSelectedParameter = GetSelectionItemInTree();
					UpdateSaveButton();
				}
			},
			dataType: 'html',
			complete: function() {
				$.unblockUI();
			},
			error: function(xhr, status, error) {
				var message = '@Lang.Get("Error connect to server. Message:")';
				alert(message + error);
			}
		});
	}

	function UpdateSaveButton() {
		var selectedParameters = GetSelectionItemInTree();
		if (IsMatchArray(window.initialSelectedParameter, selectedParameters)) {
			$("div.square-button").addClass("square-button-disabled");
		} else {
			$("div.square-button").removeClass("square-button-disabled");
		}
	}

	function GetSelectionItemInTree() {
		var ids = $("#jstree").jstree("get_selected");
		return ids;
	}

	function DrawTemplateParameter() {
		$("#jstree").fadeOut(300, function () {
			$("#jstree").jstree("destroy");
			var selectedItem = $(".selected-item")[0];
			if (selectedItem === undefined) {
				return;
			}
			var selectedId = $(selectedItem).attr('id');
			$.getJSON("Permission/GetParameterTree?templateId=" + selectedId, function (data) {
				$('#jstree').jstree({
					'plugins': ["wholerow", "checkbox"],
					'core': {
						'data': data,
						'themes': {
							'name': 'default',
							'responsive': true
						}
					}
				});
				window.initialSelectedParameter = GetSelectionItemInTree();
				UpdateSaveButton();
				$("#jstree").fadeIn(500);
			});
			
		});
	}

	function IsMatchArray(array1, array2) {
		if (array1.length != array2.length) {
			return false;
		}
		for (var i = 0; i < array1.length; i++) {
			var exist = false;
			for (var j = 0; j < array2.length; j++) {
				if (array1[i] === array2[j]) {
					exist = true;
					break;
				}
			}
			if (!exist) {
				return false;
			}
		}
		return true;
	}

	function PermissionForm(action) {
		switch (action) {
			case "RefreshTemplates":
				DrawTemplates();
			default:
		}
	}
</script>
