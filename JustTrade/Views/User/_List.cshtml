@using JustTrade.Helpers
<script src="Scripts/DataTables/jquery.dataTables.min.js"></script>
<script src="Scripts/DataTables/dataTables.tableTools.js"></script>
<script src="Scripts/DataTables/dataTables.bootstrap.js"></script>
<script src="Scripts/context.menu.js"></script>
<link rel="stylesheet" href="../Content/css/admin/user.css">

<table id="userDataTable" class="table compact hover table-striped" cellspacing="0"
	width="100%">

	<thead>
		<tr id="tr_head">
			<th>id</th>
			<th>ФИО</th>
			<th>Логин</th>
			<th>Администратор</th>
		</tr>
	</thead>

</table>

<div id="json_data" style="display: none"></div>

<ul id="contextMenu" class="dropdown-menu" role="menu" style="display: none">
	<li><a target="add"><i target="add" class="glyphicon glyphicon-plus"></i> @Lang.Get("Add")</a></li>
	<li><a target="edit"><i target="edit" class="glyphicon glyphicon-pencil"></i> @Lang.Get("Edit")</a></li>
	<li><a target="remove"><i target="remove" class="glyphicon glyphicon-trash"></i> @Lang.Get("Remove")</a></li>
	<li class="divider"></li>
	<li><a target="select"><i target="select" class="glyphicon glyphicon-ok"></i> @Lang.Get("Select all")</a></li>
	<li><a target="unselect"><i target="unselect" class="glyphicon glyphicon-remove"></i> @Lang.Get("Unselect all")</a></li>
	<li class="divider"></li>
	<li><a target="refresh"><i target="refresh" class="glyphicon glyphicon-refresh"></i> @Lang.Get("Refresh")</a></li>
	<li class="divider"></li>
	<li><a target="selectmany" class="context-menu-checkbox">
			<i target="selectmany" class="glyphicon glyphicon-menu-hamburger"><input target="selectmany" id="selectmany" type="checkbox" value="true" readonly/> 
			</i> @Lang.Get("Select many")
	    </a></li>
</ul>

<script language="javascript">
	var table;
	var canSelectMany = false;
	$(document).ready(function() {
		CreateDatatable();

		$('#userDataTable tbody').on('click', 'tr', function() {
			if (!canSelectMany) {
				UnselectAll();
			}
			$(this).toggleClass('selected');
		});

		$('#userDataTable').on('draw.dt', function() {
			$("#userDataTable tr").contextMenu({
				menuSelector: "#contextMenu",
				menuSelected: function (id, selectedMenu) {
					var action = selectedMenu[0].target;
					if (typeof action == "undefined") {
						action = $(selectedMenu).attr("target");
					}
					
					switch (action) {
						case "add":
							AddUser();
							break;

						case "edit":
							EditUser();
							break;

						case "remove":
							RemoveUser();
							break;

						case "refresh":
							table.ajax.reload();
							break;

						case "select":
							SelectAll();
							break;

						case "unselect":
							UnselectAll();
							break;

						case "selectmany":
							canSelectMany = !canSelectMany;
							$('#selectmany').prop('checked', canSelectMany);
							break;

						default:
							alert("Action: " + action + " in menu not found");
					}

				}
			});
		});

	});

	function ToggleCheckbox(id) {
		$('#' + id).prop('checked', true);
	}

	function AjaxResult(request, action) {
		if (action === "refresh") {
			table.ajax.reload();
		}
		if (request === "AddUpdateForm" && action === "close") {
			table.ajax.reload();
			$("#AddUpdateForm").remove();
		}
	}

	function GetSelectedItems() {
		var ids = new Array();
		$(".selected").each(function (index, value) {
			var id = $(value).find('td:eq(0)').find('p').attr('id');
			ids.push(id);
		});
		return ids;
	}

	function RemoveUser() {
		var ids = GetSelectedItems();
		ShowBlockUI.Show();
		$("#RemoveForm").remove();
		$.ajax(
		{
			type: "POST",
			url: "/User/Remove/",
			data: {ids:ids},
			success: function(data) {
				$("#json_data").append("<div id='RemoveForm'>" + data + "</div>");
			},
			dataType: 'html',
			complete: function() {
				$.unblockUI();
			},
			error: function(xhr, status, error) {
				var message = '@Lang.Get("Error connect to server. Message:")';
             		alert(message + error);
             	}
             });
	}

	function EditUser() {
		var ids = GetSelectedItems();
		if (ids.length <= 0)
			return;
		ShowBlockUI.Show();
		$("#AddUpdateForm").remove();
		$.ajax(
             {
             	url: "/User/AddUpdateForm?id=" + ids[0],
             	success: function (data) {
             		$("#json_data").append("<div id='AddUpdateForm'>" + data + "</div>");
             	},
             	dataType: 'html',
             	complete: function () {
             		$.unblockUI();
             	},
             	error: function (xhr, status, error) {
             		var message = '@Lang.Get("Error connect to server. Message:")';
             		alert(message + error);
             	}
             });
	}

	function AddUser() {
		$("#AddUpdateForm").remove();
		ShowBlockUI.Show();
		$.ajax(
             {
             	url: "/User/AddUpdateForm",
             	success: function (data) {
             		$("#json_data").append("<div id='AddUpdateForm'>" + data + "</div>");
             	},
             	dataType: 'html',
             	complete: function () {
             		$.unblockUI();
             	},
             	error: function (xhr, status, error) {
             		var message = '@Lang.Get("Error connect to server. Message:")';
             		alert(message + error);
             	}
             });
	}

	function SelectById(id) {
		$("#" + id).parent().parent().addClass("selected");
	}

	function UnselectAll() {
		$("#userDataTable tr:not(#tr_head)").removeClass("selected");
	}

	function SelectAll() {
		$("#userDataTable tr:not(#tr_head)").addClass("selected");
	}

	function CreateDatatable() {
		table = $('#userDataTable').DataTable({
			ajax: "/User/JsonList",
			lengthChange: true,
			'iDisplayLength': 15,
			"oLanguage": {
				"sLoadingRecords": "Пожалуйста подождите - загружается...",
				"sProcessing": "Подождите...",
				"sLengthMenu": "Показать _MENU_ записей",
				"sZeroRecords": "Записи отсутствуют.",
				"sInfo": "Записи с _START_ до _END_ из _TOTAL_ записей",
				"sInfoEmpty": "Записи с 0 до 0 из 0 записей",
				"sInfoFiltered": "(отфильтровано из _MAX_ записей)",
				"sEmptyTable": "Ничего не найдено",
				"sInfoPostFix": "",
				"sSearch": "Поиск:",
				"sUrl": "",
				"oPaginate": {
					"sFirst": "Первая",
					"sPrevious": "<",
					"sNext": ">",
					"sLast": "Последняя"
				},
				"oAria": {
					"sSortAscending": ": активировать для сортировки столбца по возрастанию",
					"sSortDescending": ": активировать для сортировки столбцов по убыванию"
				}
			},
			columns: [
                { data: "Id" },
                {
                	data: null, render: function (data, type, row) {
                		return "<p id='" + data.Id + "'>" + (data.Name == null ? "" : data.Name) + "</p>";
                	}
                },
                { data: "Login" },
                {
                	data: null, render: function (data, type, row) {
                		switch (data.IsSuperuser) {
                			case true: return "Да"; break;
                			case false: return "Нет"; break;
                			default: return "None";
                		}
                	}
                }
			],
			"order": [[2, "desc"]],
			"columnDefs": [
                {
                	"targets": [0],
                	"visible": false
                }
			]
		});

	}

</script>
